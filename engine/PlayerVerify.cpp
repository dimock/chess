
#include "Player.h"
#include "MovesGenerator.h"

//////////////////////////////////////////////////////////////////////////
#ifdef VERIFY_ESCAPE_GENERATOR
void Player::verifyEscapeGen(int depth, int ply, ScoreType alpha, ScoreType betta)
{
  int counter = 0;
  if ( board_.getState() == Board::UnderCheck )
  {
    EscapeGenerator eg(board_, depth, ply, *this, alpha, betta, counter);
    MovesGenerator mg(board_, depth, ply, this, alpha, betta, counter);

    Move legal[Board::MovesMax];
    int num = 0;

    for ( ;; )
    {
      const Move & move = mg.move();
      if ( !move )
        break;

      bool valid = false;
      Board board0(board_);

      if ( board_.makeMove(move) )
      {
        legal[num++] = move;
        valid = true;
      }

      board_.verifyMasks();
      board_.unmakeMove();

      THROW_IF( board0 != board_, "board unmake wasn't correct applied" );

      board_.verifyMasks();

      if ( valid && !eg.find(move) )
      {
        EscapeGenerator eg1(board_, depth, ply, *this, alpha, betta, counter);
        THROW_IF( true, "some legal escape from check wasn't generated" );
      }
    }

    THROW_IF(eg.count() + counter != num, "number of escape moves isn't correct");

    for ( ;; )
    {
      const Move & move = eg.escape();
      if ( !move )
        break;

      Board board0(board_);

      if ( !board_.makeMove(move) )
      {
        THROW_IF( true, "illegal move generated by escape generator" );
      }

      board_.verifyMasks();
      board_.unmakeMove();

      THROW_IF( board0 != board_, "board unmake wasn't correct applied" );

      board_.verifyMasks();

      bool found = false;
      for (int i = 0; !found && i < num; ++i)
      {
        if ( legal[i] == move )
          found = true;
      }

      if ( !found )
      {
        THROW_IF( true, "move from escape generator isn't found in the legal moves list" );
      }
    }
  }
}
#endif